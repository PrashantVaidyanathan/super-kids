/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package superkidsapplication.panels;

import com.ece.superkids.questions.QuestionDatabase;
import com.ece.superkids.questions.QuestionDatabaseFactory;
import com.ece.superkids.questions.entities.Question;
import java.awt.Color;
import java.awt.event.HierarchyEvent;
import java.awt.event.HierarchyListener;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import superkidsapplication.controllers.MusicController;
import superkidsapplication.controllers.PanelController;
import superkidsapplication.controllers.QuestionController;
import superkidsapplication.events.Session;

/**
 *
 * @author david
 *
 */
public class StartScreenPanel extends javax.swing.JPanel {

    private PanelController controller;
    private MusicController mController;
    private QuestionController qController;
    private SoundPanel sound_options;
    private Session session;
    private QuestionDatabase qD;

    /**
     * Creates new form StartScreenPanel
     */
    private StartScreenPanel() {
        this.setName("StartScreen");
        controller = PanelController.getInstance();
        mController = MusicController.getInstance();
        sound_options = SoundPanel.getInstance();
        qController = QuestionController.getInstance();
        session = Session.aSession();
        qD = QuestionDatabaseFactory.aQuestionDatabaseWithAllQuestions();

        initComponents();

        //add a listener to see if the panel is showing.
        //if it is showing and option is set to ON, then play music.
        //this is needed when the player exits to startscreen when playing the game
        //so that the music resumes
        final StartScreenPanel panel = this;
        //load default music
        mController.loadThemeMusic("GameForest");
        panel.addHierarchyListener(new HierarchyListener() {
            public void hierarchyChanged(HierarchyEvent e) {
                if ((HierarchyEvent.SHOWING_CHANGED & e.getChangeFlags()) != 0
                        && panel.isShowing() && sound_options.isMusicON()) {
                    System.out.println("Resume theme music");
                    mController.playMusic();
                }
            }
        });
    }

    //display continue button???
    ///called from panel listener
    //everytime startscreen is visible
    public void doContinueGame() {
        Question q = session.getLoggedInUser().getCurrentQuestion();
        if (q == null) {
            ContinueGame.setVisible(false);
        } else {
            ContinueGame.setVisible(true);
        }
    }

    private static class StartScreenPanelHolder {

        public static final StartScreenPanel INSTANCE = new StartScreenPanel();
    }

    public static StartScreenPanel getInstance() {
        return StartScreenPanel.StartScreenPanelHolder.INSTANCE;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ScreenComponents = new javax.swing.JLayeredPane();
        ContinueGame = new javax.swing.JButton();
        NewGame = new javax.swing.JButton();
        Options = new javax.swing.JButton();
        BackGround = new javax.swing.JLabel();

        setMinimumSize(new java.awt.Dimension(800, 600));
        setPreferredSize(new java.awt.Dimension(800, 600));
        setLayout(new java.awt.BorderLayout());

        ScreenComponents.setAlignmentX(0.0F);
        ScreenComponents.setAlignmentY(0.0F);
        ScreenComponents.setMinimumSize(new java.awt.Dimension(800, 600));
        ScreenComponents.setSize(new java.awt.Dimension(800, 600));

        ContinueGame.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        ContinueGame.setForeground(new java.awt.Color(255, 255, 255));
        ContinueGame.setText("Continue Game");
        ContinueGame.setAlignmentY(0.0F);
        ContinueGame.setBorderPainted(false);
        ContinueGame.setContentAreaFilled(false);
        ContinueGame.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ContinueGame.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        ContinueGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                ContinueGameMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                ContinueGameMouseEntered(evt);
            }
        });
        ContinueGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ContinueGameActionPerformed(evt);
            }
        });
        ContinueGame.setBounds(480, 260, 190, 50);
        ScreenComponents.add(ContinueGame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        NewGame.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        NewGame.setForeground(new java.awt.Color(255, 255, 255));
        NewGame.setText("New Game");
        NewGame.setBorderPainted(false);
        NewGame.setContentAreaFilled(false);
        NewGame.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        NewGame.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        NewGame.setMaximumSize(new java.awt.Dimension(180, 29));
        NewGame.setMinimumSize(new java.awt.Dimension(180, 29));
        NewGame.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                NewGameMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                NewGameMouseEntered(evt);
            }
        });
        NewGame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewGameActionPerformed(evt);
            }
        });
        NewGame.setBounds(520, 300, 150, 50);
        ScreenComponents.add(NewGame, javax.swing.JLayeredPane.DEFAULT_LAYER);

        Options.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        Options.setForeground(new java.awt.Color(255, 255, 255));
        Options.setText("Options");
        Options.setBorderPainted(false);
        Options.setContentAreaFilled(false);
        Options.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Options.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        Options.setMaximumSize(new java.awt.Dimension(180, 29));
        Options.setMinimumSize(new java.awt.Dimension(180, 29));
        Options.setSize(new java.awt.Dimension(140, 50));
        Options.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                OptionsMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                OptionsMouseEntered(evt);
            }
        });
        Options.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OptionsActionPerformed(evt);
            }
        });
        Options.setBounds(530, 340, 140, 50);
        ScreenComponents.add(Options, javax.swing.JLayeredPane.DEFAULT_LAYER);

        BackGround.setIcon(new javax.swing.ImageIcon(getClass().getResource("/backgrounds/startscreenbackground.jpg"))); // NOI18N
        BackGround.setBounds(0, 0, 800, 600);
        ScreenComponents.add(BackGround, javax.swing.JLayeredPane.DEFAULT_LAYER);

        add(ScreenComponents, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void ContinueGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ContinueGameActionPerformed
        try {
            // TODO add your handling code here:
            //get the question that user has been playing before
            Question q = session.getLoggedInUser().getCurrentQuestion();
            //get question number
            int number = 0;
            //if returned q is null, then no saved current question
            if (q != null) {
                number = qD.getQuestionNumber(q);
            }
            else{
                return;
            }
            //if returned number is -1, then question is not found in the database
            if (number != -1) {
                System.out.println("Continue question:" + q.getQuestion() + " index:" + number);
                //and set number in question controller
                qController.setCount(number);
                //create the question panel
                QuestionPanel qPanel = qController.createQuestionPanel(q.getLevel(), q.getCategory());
                //display the questionpanel
                controller.addPanel(qPanel);
            }
            else{
                System.out.println("Cannot find saved question.");
            }
        } catch (IOException ex) {
            Logger.getLogger(StartScreenPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_ContinueGameActionPerformed

    //if new game is clicked
    private void NewGameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewGameActionPerformed
        // TODO add your handling code here:
        //stop music when a the game is started
        //mController.stopMusic();
        //create a new game panel
        NewGamePanel gamePanel = new NewGamePanel();
        //add new panel
        controller.addPanel(gamePanel);
    }//GEN-LAST:event_NewGameActionPerformed

    private void OptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OptionsActionPerformed
        // TODO add your handling code here:
        //OptionsPanel is a singleton
        //add optionspanel
        controller.addPanel(new OptionPanel());
    }//GEN-LAST:event_OptionsActionPerformed

    private void NewGameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewGameMouseEntered
        // TODO add your handling code here:
        this.NewGame.setForeground(Color.yellow);
    }//GEN-LAST:event_NewGameMouseEntered

    private void NewGameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_NewGameMouseExited
        // TODO add your handling code here:
        this.NewGame.setForeground(Color.white);
    }//GEN-LAST:event_NewGameMouseExited

    private void OptionsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OptionsMouseExited
        // TODO add your handling code here:
        this.Options.setForeground(Color.white);
    }//GEN-LAST:event_OptionsMouseExited

    private void OptionsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OptionsMouseEntered
        // TODO add your handling code here:
        this.Options.setForeground(Color.yellow);
    }//GEN-LAST:event_OptionsMouseEntered

    private void ContinueGameMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContinueGameMouseEntered
        // TODO add your handling code here:
        this.ContinueGame.setForeground(Color.yellow);
    }//GEN-LAST:event_ContinueGameMouseEntered

    private void ContinueGameMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ContinueGameMouseExited
        // TODO add your handling code here:
        this.ContinueGame.setForeground(Color.white);
    }//GEN-LAST:event_ContinueGameMouseExited
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BackGround;
    private javax.swing.JButton ContinueGame;
    private javax.swing.JButton NewGame;
    private javax.swing.JButton Options;
    private javax.swing.JLayeredPane ScreenComponents;
    // End of variables declaration//GEN-END:variables
    //=============================================//
}
