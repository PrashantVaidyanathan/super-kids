/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ece.superkids.ui.parent.panels;

import com.ece.superkids.images.ImageManager;
import com.ece.superkids.questions.QuestionDatabaseFactory;
import com.ece.superkids.questions.entities.Question;
import com.ece.superkids.questions.enums.QuestionLevel;
import com.ece.superkids.ui.controllers.PanelController;
import com.ece.superkids.ui.controllers.QuestionController;
import com.ece.superkids.ui.customui.ImageButton;
import com.ece.superkids.ui.providers.ImageProvider;
import com.ece.superkids.ui.providers.ResourceProviderFactory;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 * Creates new form <code>QuestionPicturePanel</code>
 * This panel allows the user to add/delete pictures as well as
 * select a picture to use as part of a question
 * 
 * @author baris, david c
 */
public class QuestionPicturePanel extends javax.swing.JPanel {

    
    String customPicturePath;
    JTextField field;
    ImageManager iManager = QuestionDatabaseFactory.anImageManager();
    ImageProvider iProvider = ResourceProviderFactory.anImageProvider();
    JPanel scrollable = new JPanel(new GridLayout(0, 4, 5, 10));
    PanelController pControl = PanelController.getInstance();
    QuestionController qControl = QuestionController.getInstance();
    
    /**
     * Creates new form QuestionPicturePanel
     * This panel allows the user to add/delete pictures as well as
     * select a picture to use as part of a question
     */
    public QuestionPicturePanel(JTextField field) {
        this.field = field;
        initComponents();
        loadPictures();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        addButton = new javax.swing.JButton();
        doneButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(800, 600));
        setSize(new java.awt.Dimension(800, 600));

        addButton.setText("Add New");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        doneButton.setText("Done");
        doneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doneButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Pick a picture, or add a new one from your computer.");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jScrollPane1))
                    .add(layout.createSequentialGroup()
                        .add(296, 296, 296)
                        .add(addButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(doneButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteButton)
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(233, 233, 233)
                .add(jLabel1)
                .addContainerGap(233, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 531, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(doneButton)
                    .add(addButton)
                    .add(deleteButton))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    /*
     * Add a new picture to the list
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        openBrowser();
    }//GEN-LAST:event_addButtonActionPerformed

    private void doneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_doneButtonActionPerformed
        // TODO add your handling code here:
        pControl.goBackOnePanel();

    }//GEN-LAST:event_doneButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(this,"Would you like to delete the selected image?","Warning",JOptionPane.YES_NO_OPTION);
        
        if (n == JOptionPane.YES_OPTION)
        {
            List<Question> qList = new ArrayList<Question>();
            qList.addAll((List<Question>) qControl.getListOfCustomQuestions(QuestionLevel.LEVEL_1));
            qList.addAll((List<Question>) qControl.getListOfCustomQuestions(QuestionLevel.LEVEL_2));
            qList.addAll((List<Question>) qControl.getListOfCustomQuestions(QuestionLevel.LEVEL_3));
            
            for (int i = 0; i < qList.size(); i++)
            {
                List<String> choices = qList.get(i).getChoices();
                for (int j = 0; j < choices.size(); j++)
                {
                    if (choices.get(j).contentEquals(field.getText()))
                    {
                        JOptionPane.showMessageDialog(this,"This image cannot be deleted. Possible reason: It is a choice to a custom question.");
                        return;
                    }
                }
            }
            
            boolean check;
            check = iManager.deleteImage(field.getText());
            System.out.println(check);
            if (check == false)
            {
                JOptionPane.showMessageDialog(this,"This image cannot be deleted. Possible reason: It is a stock image.");           
            }
            else
            {
                field.setText("");
                loadPictures();
            }
                
            
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton doneButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Open browser to pick a new picture
     */
    private void openBrowser() {
        JFileChooser c = new JFileChooser();
        String filename;
        String dir;
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            filename = (c.getSelectedFile().getName());
            dir = (c.getCurrentDirectory().toString());
            customPicturePath = dir + File.separator + filename;
            System.out.println("New picture added to custom pics:" + customPicturePath);
            String key = getKey(filename);
            newPictureKey=key;
            iManager.saveImage(customPicturePath, key);
            loadPictures(); //reload pictures
        }
    }

    /**
     * load pictures to the panel
     */
    private void loadPictures() {
        iProvider.refresh();
        scrollable.removeAll();
        scrollable.revalidate();
        scrollable.repaint();
        List keys = iProvider.getAllKeys();
        for (int i = 0; i < keys.size(); i++) {
            ImageButton button = new ImageButton();
            button.setPreferredSize(new java.awt.Dimension(150,150));
            button.setSize(150, 150);
            String key = (String) keys.get(i);
            button.setIcon(iProvider.getImage(key));   
            button.setName(key);
            button.addActionListener(new ButtonAction(field));
            button.addFocusListener(new ButtonFocus());
            scrollable.add(button);
            if(key.equals(newPictureKey)){
                button.setBackground(Color.ORANGE);
                newPictureKey="";
            }
        }
        jScrollPane1.add(scrollable);
        jScrollPane1.setViewportView(scrollable);
    }

    private String getKey(String filename) {
        int dot = 0;
        for (int i = 0; i < filename.length(); i++) {
            if (filename.charAt(i) == '.') {
                dot = i;
            }
        }
        return filename.substring(0, dot);
    }
}

class ButtonAction implements ActionListener {

    JTextField field;

    public ButtonAction(JTextField field) {
        this.field = field;
        
    }

    public void actionPerformed(ActionEvent e) {
        JButton source = (JButton) e.getSource();
        field.setText(source.getName());
    }
}

class ButtonFocus implements FocusListener {

    public void focusGained(FocusEvent e) {
        JButton source = (JButton) e.getSource();
        source.setBackground(Color.RED);
    }

    public void focusLost(FocusEvent e) {
        JButton source = (JButton) e.getSource();
        source.setBackground(Color.white);
    }
}
